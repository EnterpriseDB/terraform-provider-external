---
page_title: "{{.Name}} {{.Type}} - {{.ProviderName}}"
description: |-
{{ .Description | plainmarkdown | trimspace | prefixlines "  " }}
---

# {{.Name}}

{{ .Description | trimspace }}

## Example Usage

#### Inline Bash
{{ tffile "examples/resources/external/inline_bash/main.tf" }}

#### Inline Ansible
{{ tffile "examples/resources/external/inline_ansible/main.tf" }}
{{ codefile "yaml" "examples/resources/external/inline_ansible/playbook.yml" }}

## External Program Protocol

The external program described by the `program` attribute must implement a
specific protocol for interacting with Terraform, as follows.

The program must read all of the data passed to it on `stdin`, and parse
it as a JSON object. The JSON object contains the contents of the `query`
argument and its values will always be strings.

The program must then produce a valid JSON object on `stdout`, which will
be used to populate the `result` attribute exported to the rest of the
Terraform configuration. This JSON object must again have all of its
values as strings. On successful completion it must exit with status zero.

If the program encounters an error and is unable to produce a result, it
must print a human-readable error message (ideally a single line) to `stderr`
and exit with a non-zero status. Any data on `stdout` is ignored if the
program returns a non-zero status.

All environment variables visible to the Terraform process are passed through
to the child program.

{{ .SchemaMarkdown | trimspace }}

## Processing JSON in shell scripts

Since the external resource protocol uses JSON, it is recommended to use
the utility [`jq`](https://stedolan.github.io/jq/) to translate to and from
JSON in a robust way when implementing a resource in a shell scripting
language.

The following example shows some input/output boilerplate code for a
resource implemented in bash:

{{ tffile "examples/resources/external/run_bash/main.tf" }}
{{ codefile "shell" "examples/resources/external/run_bash/run.sh" }}

## Processing JSON with ansible playbooks
Since the external resource protocol uses JSON, it is recommended to use
the [`posix collection's json_callback`](https://docs.ansible.com/ansible/latest/collections/ansible/posix/json_callback.html).

{{ tffile "examples/resources/external/run_ansible/main.tf" }}
{{ codefile "yaml" "examples/resources/external/run_ansible/playbook.yml" }}
{{ codefile "shell" "examples/resources/external/run_ansible/run.sh" }}
{{ codefile "shell" "examples/resources/external/run_ansible/run_base64.sh" }}


## JSON Processing example:
{{ codefile "shell" "examples/resources/external/json_processing.sh" }}
